@using Microsoft.AspNetCore.Identity
@model ShowroomViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Showroom</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <link type="text/css" rel="stylesheet" href="/css/ShowroomMain.css">
    <link type="text/css" rel="stylesheet" href="/css/ShowroomStyleSheet.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" />
    
    <style>
        .glass{
            border-radius: 75px;
            border: 5px solid #F0F0F0;
        }
        #blocker {
            position: absolute;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        #instructions {
            width: 100%;
            height: 100%;
            display: -webkit-box;
            display: -moz-box;
            display: box;
            -webkit-box-orient: horizontal;
            -moz-box-orient: horizontal;
            box-orient: horizontal;
            -webkit-box-pack: center;
            -moz-box-pack: center;
            box-pack: center;
            -webkit-box-align: center;
            -moz-box-align: center;
            box-align: center;
            color: #ffffff;
            text-align: center;
            font-family: Arial;
            font-size: 14px;
            line-height: 24px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="mobile-menu-btn"><p>Menu</p></div>
    <div id="plus-sign">+</div>
    <div id="arrow-keys">
        <div id="arrow-move-forward">▲</div>
        <div id="arrow-move-backward">▼</div>
    </div>

    <div id="blocker">
        <div id="instructions">
            <span style="font-size:36px">Counter-Art! Click to start</span>
            <br /><br />
            Move: WASD<br />
            Look: MOUSE<br />

            <a asp-action="Index" asp-controller="Exhibit">
                <button id="exit-btn" class="btn-extreme-danger">Exit</button>
            </a>
        </div>
        @*<div class="container mt-5 mb-5">
            <div class="row">
                <div class="col-md-6">
                    <img src ="/imagesArt/@Model.ArtworkInformation.ElementAt(0).Source" id="myimage" style="width: 570px" />
                </div>
                <div class="col-md-6"></div>
            </div>
        </div>*@
        <div id="artInfo">
            <ul id="myUL">
                @for (int i = 0; i < Model.ArtToExhibit.Count(); i++)
                {
                    <li id="@(i+1)" style="display: none">
                        <div id="art-info-text">
                            <h1 id="painting-title">@Model.ArtToExhibit.ElementAt(i).ArtName</h1>
                           <p id="art-artist">Artist: @Model.Artist</p>
                            <p id="art-year">Year: @Model.ArtToExhibit.ElementAt(i).Year</p>
                            <p id="art-description">Description: @Model.ArtToExhibit.ElementAt(i).Description</p>
                            <p id="art-type">Type: @Model.ArtToExhibit.ElementAt(i).Type</p>
                            <p id="art-height-width">Measurements: @Model.ArtToExhibit.ElementAt(i).Height x @Model.ArtToExhibit.ElementAt(i).Width cm</p>
                        </div>
                        <div id=art-source><img src="/imagesArt/@Model.ArtToExhibit.ElementAt(i).ImageName" id="@($"myimage{i+1}")" class="zoomClass"></div>
                    </li>
                }
            </ul>
            <div id="cross"><img src="/images/cross.png" /></div>
        </div>
        <div id="exit" style="display: none">
            <h1>Do you want to exit the exhibition?</h1>
   
                <a asp-action="Index" asp-controller="Exhibit">
                    <button class="btn-extreme-danger">Yes</button>
                </a>
                <button id="exit-no" class="btn-extreme-danger">No</button>
            
        </div>

        <div id="elevator" style="display: none">

            <a asp-action="Index" asp-controller="Showroom" asp-route-id="@Model.Exhibits[Model.PreviousInList].Id" class="fh5co-project-item">
                <button value="Previous Exhibition" class="btn-extreme-danger">Previous Exhibition</button>
            </a>
            <a asp-action="Index" asp-controller="Showroom" asp-route-id="@Model.Exhibits[Model.NextInList].Id" class="fh5co-project-item">
                <button value="Next Exhibition" class="btn-extreme-danger">Next Exhibition</button>
            </a>
            <a asp-action="Index" asp-controller="Showroom" asp-route-id="@Model.Exhibits[Model.RandomIndex].Id" class="fh5co-project-item">
                <button value="I'm Feeling Lucky!" class="btn-extreme-danger">I'm Feeling Lucky!</button>
            </a>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/102/three.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.2/TweenMax.min.js"></script>
    <script type="module">

        import * as THREE from '/js/three.module.js';

        import { PointerLockControls } from '/js/PointerLockControls.js';

        let camera, scene, renderer, controls;
        let imageToZoom = '#myimage1';
        const objects = [];
        let raycaster;
        let moveForward = false;
        let moveBackward = false;
        let moveLeft = false;
        let moveRight = false;
        let canJump = false;
        let artIsClicked = false;
        let exitIsClicked = false;
        let onMobileDevice = false;
        let mobileMenuBtnIsClick = false;
        let elevatorIsClicked = false;
        let artInfoPicture;
        let artInfoName;

        let prevTime = performance.now();
        const velocity = new THREE.Vector3();
        const direction = new THREE.Vector3();
        const vertex = new THREE.Vector3();
        const color = new THREE.Color();
        var mouse = new THREE.Vector2();
        var lastX, lastY;

        init();
        animate();
        function hideAllArtInfo() {

            for (var i = 0; i < document.getElementById("myUL").children.length; i++) {

                document.getElementById("myUL").children[i].style.display = "none"
            }
        }
        function showArtInfo(image) {
           
            var ul, li
            ul = document.getElementById("myUL")
            li = ul.getElementsByTagName('li')
            for (var i = 0; i < li.length; i++) {
                if (li[i].id == image.Number) {
                    li[i].style.display = "block";
                }
            }
        }
        function init() {

            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);
            camera.position.y = 10;

            scene = new THREE.Scene();


            scene.background = new THREE.Color(0xffffff);
            scene.fog = new THREE.Fog(0xffffff, 0, 750);

            const light = new THREE.HemisphereLight(0xFFFFFF, 0xFFFFFF, 0.9);
            light.position.set(0, 0, 0);
            scene.add(light);

            controls = new PointerLockControls(camera, document.body);
            

            const blocker = document.getElementById('blocker');
            const instructions = document.getElementById('instructions');




            const artInfo = document.getElementById('artInfo');
            const artInfoSource = document.getElementById('myUL');
            const exitDetailsCross = document.getElementById('cross');





            const exitScreen = document.getElementById('exit');
            const exitScreenNo = document.getElementById('exit-no');
            const mobileMenuBtn = document.getElementById('mobile-menu-btn');
            const elevatorMenu = document.getElementById('elevator');

            artInfo.style.display = 'none';
            exitScreen.style.display = 'none';

            mobileMenuBtn.addEventListener('click', function () {
                mobileMenuBtnIsClick = true;
                controls.lock();
                controls.unlock();
            });


            blocker.addEventListener('click', function () {
                controls.lock()
            });
            

            controls.addEventListener('lock', function () {

                instructions.style.display = 'none';
                blocker.style.display = 'none';
                artIsClicked = false;
                exitIsClicked = false;
                elevatorIsClicked = false;
                mobileMenuBtnIsClick = false;
                artInfo.style.display = 'none'
                exitScreen.style.display = 'none';
                elevatorMenu.style.display = 'none';
                hideAllArtInfo();

                if (onMobileDevice === true) {
                    controls.unlock();
                }
            });

            controls.addEventListener('unlock', function () {

                if (artIsClicked === true) {
                    blocker.style.display = 'block';
                    artInfo.style.display = 'block';
                }
                else if (exitIsClicked === true) {
                    blocker.style.display = 'block';
                    exitScreen.style.display = 'block';
                } else if (elevatorIsClicked === true) {
                    blocker.style.display = 'block';
                    elevatorMenu.style.display = 'block';
                } else if (onMobileDevice === true && exitIsClicked != true && artIsClicked != true && mobileMenuBtnIsClick != true) {
                    blocker.style.display = 'none';
                } else {

                    blocker.style.display = 'block';
                    instructions.style.display = '';
                }

            });


            exitScreenNo.addEventListener('click', function () {
                controls.lock();
            });

            scene.add(controls.getObject());

            //Movement keys
            document.getElementById('arrow-move-forward').addEventListener('touchstart', function () {
                moveForward = true;
            });
            document.getElementById('arrow-move-forward').addEventListener('touchend', function () {
                moveForward = false;
            });

            document.getElementById('arrow-move-backward').addEventListener('touchstart', function () {
                moveBackward = true;
            });
            document.getElementById('arrow-move-backward').addEventListener('touchend', function () {
                moveBackward = false;
            });

            const onKeyDown = function (event) {
                switch (event.keyCode) {

                    case 38: // up
                    case 87: // w
                        moveForward = true;
                        break;

                    case 37: // left
                    case 65: // a
                        moveLeft = true;
                        break;

                    case 40: // down
                    case 83: // s
                        moveBackward = true;
                        break;

                    case 39: // right
                    case 68: // d
                        moveRight = true;
                        break;
                }
            };

            const onKeyUp = function (event) {

                switch (event.keyCode) {

                    case 38: // up
                    case 87: // w
                        moveForward = false;
                        break;

                    case 37: // left
                    case 65: // a
                        moveLeft = false;
                        break;

                    case 40: // down
                    case 83: // s
                        moveBackward = false;
                        break;

                    case 39: // right
                    case 68: // d
                        moveRight = false;
                        break;
                }
            };

            document.addEventListener('keydown', onKeyDown, false);
            document.addEventListener('keyup', onKeyUp, false);
            document.addEventListener('mousedown', onDocumentMouseDown);
            document.addEventListener('touchstart', onDocumentMouseDown);

            raycaster = new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, - 1, 0), 0, 10);

            let floorImage = "@Model.ShowroomFloor";//GetRandomFloor();
            const floorTexture = new THREE.TextureLoader().load(floorImage, function (texture) {

                texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
                texture.offset.set(0, 0);
                texture.repeat.set(5, 5);

            });
            const floorMaterial = new THREE.MeshLambertMaterial({ map: floorTexture });
            //const wallTexture = new THREE.TextureLoader().load();
            const wallMaterial = new THREE.MeshLambertMaterial({ color: 0xE1E1E1 });
            const roofMaterial = new THREE.MeshLambertMaterial({ color: 0xC5C5C2 });


            // floor
            //StartGolv
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, floorMaterial);
            mesh.name = "floor";

            scene.add(mesh);
            mesh.position.set(0, 0, -15);
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, floorMaterial);
            mesh.name = "floor";

            scene.add(mesh);
            mesh.position.set(0, 0, -65);
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, floorMaterial);
            mesh.name = "floor";

            scene.add(mesh);
            mesh.position.set(0, 0, -115);
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, floorMaterial);
            mesh.name = "floor";

            scene.add(mesh);
            mesh.position.set(0, 0, -165);


            //HögerGolv
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, floorMaterial);
            mesh.name = "floor";
            scene.add(mesh);
            mesh.position.set(50, 0, -15);


            //HögerLångGolv
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, floorMaterial);
            mesh.name = "floor";
            scene.add(mesh);
            mesh.position.set(100, 0, -15);
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, floorMaterial);
            mesh.name = "floor";
            scene.add(mesh);
            mesh.position.set(100, 0, -65);
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, floorMaterial);
            mesh.name = "floor";
            scene.add(mesh);
            mesh.position.set(100, 0, -115);
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, floorMaterial);
            mesh.name = "floor";
            scene.add(mesh);
            mesh.position.set(100, 0, -165);


            //UppeGolv
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, floorMaterial);
            mesh.name = "floor";
            scene.add(mesh);
            mesh.position.set(50, 0, -165);




            // objects
            //Ytterväggar
            //vägg vänsterYtter
            var geometry = new THREE.BoxGeometry(1, 35, 205);
            var mesh = new THREE.Mesh(geometry, wallMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(-27, 17.5, -90);

            //Vägg bakomYtter
            var geometry = new THREE.BoxGeometry(155, 35, 1);
            var mesh = new THREE.Mesh(geometry, wallMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(50, 17.5, 12);

            //Vägg HögerYtter
            var geometry = new THREE.BoxGeometry(1, 35, 205);
            var mesh = new THREE.Mesh(geometry, wallMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(127, 17.5, -90);

            //väggFramYtter
            var geometry = new THREE.BoxGeometry(155, 35, 1);
            var mesh = new THREE.Mesh(geometry, wallMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(50, 17.5, -192);

            //Innerväggar


            //VäggVänsterInner
            var geometry = new THREE.BoxGeometry(1, 35, 97);
            var mesh = new THREE.Mesh(geometry, wallMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(27, 17.5, -90);

            //VäggBakInner
            var geometry = new THREE.BoxGeometry(45, 35, 1);
            var mesh = new THREE.Mesh(geometry, wallMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(50, 17.5, -42);

            //VäggHögerInner
            var geometry = new THREE.BoxGeometry(1, 35, 97);
            var mesh = new THREE.Mesh(geometry, wallMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(73, 17.5, -90);


            //väggFramInner
            var art = new THREE.TextureLoader().load('/ShowroomImages/global-art-tack.jpg');
            var geometry = new THREE.BoxGeometry(45, 35, 1);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall"
            scene.add(mesh);
            mesh.position.set(50, 17.5, -138);


            //Tak
            //StartTak
            var geometry = new THREE.BoxGeometry(50, 1, 200);
            var mesh = new THREE.Mesh(geometry, roofMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(0, 35, -90);


            //HögerTak
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, roofMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(50, 35, -15);


            //HögerLångTak
            var geometry = new THREE.BoxGeometry(50, 1, 200);
            var mesh = new THREE.Mesh(geometry, roofMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(100, 35, -90);


            //UppeTak
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var mesh = new THREE.Mesh(geometry, roofMaterial);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(50, 35, -165);

            //PelareVänsterFram
            var geometry = new THREE.BoxGeometry(0.5, 35, 0.5);
            var material = new THREE.MeshLambertMaterial({ color: 0x000000 });
            var mesh = new THREE.Mesh(geometry, material);

            scene.add(mesh);
            mesh.position.set(-26, 17.5, -191);

            //PelareHögerFram
            var geometry = new THREE.BoxGeometry(0.5, 35, 0.5);
            var material = new THREE.MeshLambertMaterial({ color: 0x000000 });
            var mesh = new THREE.Mesh(geometry, material);

            scene.add(mesh);
            mesh.position.set(126, 17.5, -191);

            //PelareVänsterBak
            var geometry = new THREE.BoxGeometry(0.5, 35, 0.5);
            var material = new THREE.MeshLambertMaterial({ color: 0x000000 });
            var mesh = new THREE.Mesh(geometry, material);

            scene.add(mesh);
            mesh.position.set(-26, 17.5, 11);

            //PelareHögerBak
            var geometry = new THREE.BoxGeometry(0.5, 35, 0.5);
            var material = new THREE.MeshLambertMaterial({ color: 0x000000 });
            var mesh = new THREE.Mesh(geometry, material);

            scene.add(mesh);
            mesh.position.set(126, 17.5, 11);

            //Tavlor Vänsteryttervägg
            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(0).ImageName');
            var number = 1;
            var geometry = GetPaintingRatio(@Model.Images.ElementAt(0).Height, @Model.Images.ElementAt(0).Width, number);

            //new THREE.BoxGeometry(0.3, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;



            //mesh.background = 0xFFFFFF;

            scene.add(mesh);
            mesh.position.set(-26.5, 12, -27);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(1).ImageName');
            var number = 2;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(1).Height, @Model.Images.ElementAt(1).Width, number);

            //var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;
            //mesh.background = 0xFFFFFF;

            scene.add(mesh);
            mesh.position.set(-26.5, 12, -70);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(2).ImageName');
            var number = 3;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(2).Height, @Model.Images.ElementAt(2).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            scene.add(mesh);
            mesh.position.set(-26.5, 12, -113);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(3).ImageName');
            var number = 4;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(3).Height, @Model.Images.ElementAt(3).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(-26.5, 12, -156);
            scene.add(mesh);

            //Tavlor YtterFramVägg

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(4).ImageName');
            var number = 5;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(4).Height, @Model.Images.ElementAt(4).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;


            mesh.position.set(7, 12, -191.5);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(5).ImageName');
            var number = 6;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(5).Height, @Model.Images.ElementAt(5).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(50, 12, -191.5);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(6).ImageName');
            var number = 7;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(6).Height, @Model.Images.ElementAt(6).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(93, 12, -191.5);
            scene.add(mesh);

            //Tavlor YtterHögerVägg

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(7).ImageName');
            var number = 8;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(7).Height, @Model.Images.ElementAt(7).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(126.5, 12, -27);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(8).ImageName');
            var number = 9;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(8).Height, @Model.Images.ElementAt(8).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            scene.add(mesh);
            mesh.position.set(126.5, 12, -70);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(9).ImageName');
            var number = 10;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(9).Height, @Model.Images.ElementAt(9).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            scene.add(mesh);
            mesh.position.set(126.5, 12, -113);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(10).ImageName');
            var number = 11;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(10).Height, @Model.Images.ElementAt(10).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(126.5, 12, -156);
            scene.add(mesh);

            //Tavla YtterväggBak


            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(11).ImageName');
            var number = 12;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(11).Height, @Model.Images.ElementAt(11).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(50, 12, 11.5);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(12).ImageName');
            var number = 13;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(12).Height, @Model.Images.ElementAt(12).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(93, 12, 11.5);
            scene.add(mesh);


            //Tavla InnerväggVänster
            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(13).ImageName');
            var number = 14;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(13).Height, @Model.Images.ElementAt(13).Width, number);
            var material = new THREE.MeshLambertMaterial({map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(26.5, 12, -70);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(14).ImageName');
            var number = 15;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(14).Height, @Model.Images.ElementAt(14).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(26.5, 12, -113);
            scene.add(mesh);

            //TavlorInnerväggHöger
            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(15).ImageName');
            var number = 16;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(15).Height, @Model.Images.ElementAt(15).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(73.5, 12, -70);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('/imagesArt/@Model.Images.ElementAt(16).ImageName');
            var number = 17;

            var geometry = GetPaintingRatio(@Model.Images.ElementAt(16).Height, @Model.Images.ElementAt(16).Width, number);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = number;

            mesh.position.set(73.5, 12, -113);
            scene.add(mesh);

            //DörrYtterväggBak
            var art = new THREE.TextureLoader().load('/ShowroomImages/door.jpg');
            var geometry = new THREE.BoxGeometry(16, 20, 0.1);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "exit";

            mesh.position.set(0, 10, 11.5);
            scene.add(mesh);

            //Hiss BakreInnerVägg
            var art = new THREE.TextureLoader().load('/ShowroomImages/elevator.png');
            var geometry = new THREE.BoxGeometry(16, 20, 0.1);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "elevator";
            mesh.position.set(50, 10, -41.5);
            scene.add(mesh);

            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);
            window.addEventListener('resize', onWindowResize, false);
            onWindowResize();
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            if (window.innerWidth < 1000) {
                onMobileDevice = true;
            } else {
                onMobileDevice = false;
            }

        }

        function onDocumentMouseDown(event) {

            if (onMobileDevice === true) {
                
                mouse.x = (event.clientX / renderer.domElement.width ) * 2 - 1;
                mouse.y = -(event.clientY / renderer.domElement.height) * 2 + 1;
                console.log(mouse.x, mouse.y)
            }
            else {

                mouse.x = 0; /*( event.clientX / renderer.domElement.width ) * 2 - 1;*/
                mouse.y = 0;/*- ( event.clientY / renderer.domElement.height ) * 2 + 1;*/ //If you want the raycaster to look at the position of the mouse
            }
            raycaster.setFromCamera(mouse, camera);
            raycaster.far = 100;
            raycaster.near = 0;
            var intersects = raycaster.intersectObjects(scene.children);
            if (intersects.length > 0 && intersects[0].object.name === 'exit') {
                exitIsClicked = true;
                controls.lock();
                controls.unlock();
            } else if(intersects.length > 0 && intersects[0].object.name === 'elevator'){
                elevatorIsClicked = true;
                controls.lock();
                controls.unlock();
            } else if (intersects.length > 0 && intersects[0].object.name != 'floor' && intersects[0].object.name != 'wall' && intersects[0].object.material.map.image.outerHTML != '<img crossorigin="anonymous" src="/imagesArt/EmptySpaceInShowroom.jpg">') {

                let image = intersects[0].object;
                artIsClicked = true;
                controls.lock();
                controls.unlock();
                showArtInfo(image);
                controls.unlock();
            }
        }

        function animate() {
            requestAnimationFrame(animate);
            const time = performance.now();

            if (controls.isLocked === true || onMobileDevice === true) {
                const delta = (time - prevTime) / 1500;
                velocity.x -= velocity.x * 10.0 * delta;
                velocity.z -= velocity.z * 10.0 * delta;
                velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass
                direction.z = Number(moveForward) - Number(moveBackward);
                direction.x = Number(moveRight) - Number(moveLeft);
                direction.normalize(); // this ensures consistent movements in all directions

                if (moveForward || moveBackward) velocity.z -= direction.z * 400.0 * delta;
                if (moveLeft || moveRight) velocity.x -= direction.x * 400.0 * delta;

                if (controls.getObject().position.x > 122) {
                    controls.getObject().position.x = 122;
                }
                if (controls.getObject().position.z > 7) {
                    controls.getObject().position.z = 7;
                }
                if (controls.getObject().position.x < -23) {
                    controls.getObject().position.x = -23;
                }
                if (controls.getObject().position.z < -187) {
                    controls.getObject().position.z = -187;
                }

                //VäggVänsterInner
                if ((controls.getObject().position.x > 21 && controls.getObject().position.x < 73) &&
                    (controls.getObject().position.z < -42 && controls.getObject().position.z > -138)) {
                    controls.getObject().position.x = 21;
                }
                //VäggBakInner
                if ((controls.getObject().position.x > 27 && controls.getObject().position.x < 73) &&
                    (controls.getObject().position.z < -36 && controls.getObject().position.z > -42)) {
                    controls.getObject().position.z = -36;
                }//VäggHögerInner
                if ((controls.getObject().position.x > 73 && controls.getObject().position.x < 77) &&
                    (controls.getObject().position.z < -42 && controls.getObject().position.z > -138)) {
                    controls.getObject().position.x = 77;
                }
                //VäggFramInner
                if ((controls.getObject().position.x > 27 && controls.getObject().position.x < 73) &&
                    (controls.getObject().position.z > -142 && controls.getObject().position.z < -138)) {
                    controls.getObject().position.z = -142;
                }
                controls.moveRight(- velocity.x * delta);
                controls.moveForward(- velocity.z * delta);
                controls.getObject().position.y += (velocity.y * delta); // new behavior

                if (controls.getObject().position.y < 10) {
                    velocity.y = 0;
                    controls.getObject().position.y = 10;
                    canJump = true;
                }
                if (controls.getObject().position.x < 10) {
                    velocity.y = 0;
                    controls.getObject().position.y = 10;
                    canJump = true;
                }
            }
            prevTime = time;
            renderer.render(scene, camera);
        }
        function GetPaintingRatio(height, width, meshNumber) {
            let specialPaintings = [5, 6, 7, 12, 13];
            if (specialPaintings.includes(meshNumber)) {
                if (height > width) {
                    return new THREE.BoxGeometry(8, 13, 0.3);
                } else if (width > height) {
                    return new THREE.BoxGeometry(13, 8, 0.3);
                } else if (width == height) {
                    return new THREE.BoxGeometry(10, 10, 0.3);
                }
            }
            else {

                if (height > width){
                    return new THREE.BoxGeometry(0.3, 13, 8);
                } else if (width > height) {
                    return new THREE.BoxGeometry(0.3, 8, 13);
                } else if (width == height) {
                    return new THREE.BoxGeometry(0.3, 10, 10);
                }
            }
        }
    </script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="/js/zoomsl.min.js"></script>
    <script>
        $('.zoomClass').imagezoomsl({
            zoomrange: [1, 20],
            zoomstart: 1,
            innerzoommagnifier: true,
            classmagnifier: 'glass',
            magnifiersize: [150, 150]
        });
    </script>
    
</body>
</html>
