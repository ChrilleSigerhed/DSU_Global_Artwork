@using Microsoft.AspNetCore.Identity
@model ShowroomViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Showroom</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <link type="text/css" rel="stylesheet" href="/css/ShowroomMain.css">
    <link type="text/css" rel="stylesheet" href="/css/ShowroomStyleSheet.css">
    <style>
        #blocker {
            position: absolute;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        #instructions {
            width: 100%;
            height: 100%;
            display: -webkit-box;
            display: -moz-box;
            display: box;
            -webkit-box-orient: horizontal;
            -moz-box-orient: horizontal;
            box-orient: horizontal;
            -webkit-box-pack: center;
            -moz-box-pack: center;
            box-pack: center;
            -webkit-box-align: center;
            -moz-box-align: center;
            box-align: center;
            color: #ffffff;
            text-align: center;
            font-family: Arial;
            font-size: 14px;
            line-height: 24px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    
    <div id="plus-sign">+</div>
    <div id="blocker">
        <div id="instructions">
            <span style="font-size:36px">Counter-Art! Click to start</span>
            <br /><br />
            Move: WASD<br />
            Look: MOUSE
        </div>
        <div id="artInfo">
            <ul id="myUL">
                @for (int i = 0; i < Model.Images.Count; i++)
                {
                    <li id="@(i+1)" style="display: none">
                        <div id="art-info-text">
                            <h1 id="painting-title">@Model.Images[i].Title</h1>
                            <p id="art-artist">@Model.Images[i].Artist</p>
                            <p id="art-year">@Model.Images[i].Year</p>
                            <p id="art-description">@Model.Images[i].Description</p>
                            <p id="art-height-width">@Model.Images[i].Height x @Model.Images[i].Width cm</p>
                        </div>
                        <div id=art-source><img src="@Model.Images[i].Source"></div>
                    </li>
                }
            </ul>
            @*<h1 id="painting-name"></h1>
            <br /><br />
            <div id=art-source><img src="#"></div>
            <p id="art-title"></p><br />
            <p id="art-artist"></p><br />
            <p id="art-year"></p>
            <p id="art-description"></p>
            <p id="art-height-width"></p>*@
        </div>
        <div id="exit" style="display: none">
            <h1>Do you want to exit the exhibition?</h1>
            <form>
                <input type="button" value="Yes" onclick="history.back()">
                <input type="button" id="exit-no" value="No">
            </form>
        </div>

    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/102/three.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.2/TweenMax.min.js"></script>
    <script type="module">

        import * as THREE from '/js/three.module.js';

        import { PointerLockControls } from '/js/PointerLockControls.js';

        let camera, scene, renderer, controls;

        const objects = [];

        let raycaster;

        let moveForward = false;
        let moveBackward = false;
        let moveLeft = false;
        let moveRight = false;
        let canJump = false;
        let artIsClicked = false;
        let exitIsClicked = false;
        let artInfoPicture;
        let artInfoName;

        let prevTime = performance.now();
        const velocity = new THREE.Vector3();
        const direction = new THREE.Vector3();
        const vertex = new THREE.Vector3();
        const color = new THREE.Color();
        var mouse = new THREE.Vector2();

        init();
        animate();
        function hideAllArtInfo() {
            //var ul, li
            //ul = document.getElementById('myUL')
            //li = ul.getElementByTagName('li')
            //for (var i = 0; i < li.length; i++) {

            //    li[i].style.display = "none"
            //}
            for (var i = 0; i < document.getElementById("myUL").children.length; i++) {

                document.getElementById("myUL").children[i].style.display = "none"
            }

        }
        function showArtInfo(image) {
            var ul, li
            ul = document.getElementById("myUL")
            li = ul.getElementsByTagName('li')
            for (var i = 0; i < li.length; i++) {
                if (li[i].id == image.Number) {
                    li[i].style.display = "block"
                }
            }
            //var ID = image.Number
            //console.log(ID)
            //document.getElementById("myUL").children[ID].style.display = "block"
        }
        function init() {

            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);
            camera.position.y = 10;

            scene = new THREE.Scene();


            scene.background = new THREE.Color(0xffffff);
            scene.fog = new THREE.Fog(0xffffff, 0, 750);

            const light = new THREE.HemisphereLight(0xFFFFFF, 0xFFFFFF, 0.9);
            light.position.set(0, 0, 0);
            scene.add(light);

            controls = new PointerLockControls(camera, document.body);

            const blocker = document.getElementById('blocker');
            const instructions = document.getElementById('instructions');




            const artInfo = document.getElementById('artInfo');
            const artInfoSource = document.getElementById('myUL');
            //const artInfoTitle = document.getElementById('art-title');
            //const artInfoArtist = document.getElementById('art-artist');
            //const artInfoYear = document.getElementById('art-year');
            //const artInfoDescription = document.getElementById('art-description');
            //const artInfoHeightWidth = document.getElementById('art-height-width');
            //const artInfoNameContent = document.getElementById('painting-name');





            const exitScreen = document.getElementById('exit');
            const exitScreenNo = document.getElementById('exit-no');

            artInfo.style.display = 'none';
            exitScreen.style.display = 'none';

            instructions.addEventListener('click', function () {

                controls.lock();

            }, false);

            artInfoSource.addEventListener('click', function () {

                controls.lock();
            })
            controls.addEventListener('lock', function () {

                instructions.style.display = 'none';
                blocker.style.display = 'none';
                artIsClicked = false;
                exitIsClicked = false;
                artInfo.style.display = 'none'
                exitScreen.style.display = 'none';
                hideAllArtInfo();
            });

            controls.addEventListener('unlock', function () {

                if (artIsClicked === true) {
                    blocker.style.display = 'block';
                    artInfo.style.display = 'block';
                    //artInfoSource.innerHTML = artInfoPicture;
                    //artInfoNameContent.innerHTML = artInfoName

                }
                else if (exitIsClicked === true) {
                    blocker.style.display = 'block';
                    exitScreen.style.display = 'block';

                }
                else {

                    blocker.style.display = 'block';
                    instructions.style.display = '';
                }

            });


            exitScreenNo.addEventListener('click', function () {
                controls.lock();
            });

            scene.add(controls.getObject());

            const onKeyDown = function (event) {
                switch (event.keyCode) {

                    case 38: // up
                    case 87: // w
                        moveForward = true;
                        break;

                    case 37: // left
                    case 65: // a
                        moveLeft = true;
                        break;

                    case 40: // down
                    case 83: // s
                        moveBackward = true;
                        break;

                    case 39: // right
                    case 68: // d
                        moveRight = true;
                        break;
                }

            };

            const onKeyUp = function (event) {

                switch (event.keyCode) {

                    case 38: // up
                    case 87: // w
                        moveForward = false;
                        break;

                    case 37: // left
                    case 65: // a
                        moveLeft = false;
                        break;

                    case 40: // down
                    case 83: // s
                        moveBackward = false;
                        break;

                    case 39: // right
                    case 68: // d
                        moveRight = false;
                        break;


                }

            };

            document.addEventListener('keydown', onKeyDown, false);
            document.addEventListener('keyup', onKeyUp, false);
            document.addEventListener('mousedown', onDocumentMouseDown);

            raycaster = new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, - 1, 0), 0, 10);


            const texture = new THREE.TextureLoader().load('/ShowroomImages/floortile.jpg');

            // floor
            //StartGolv
            var geometry = new THREE.BoxGeometry(50, 1, 200);
            var material = new THREE.MeshLambertMaterial({ map: texture });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "floor";

            scene.add(mesh);
            mesh.position.set(0, 0, -90);


            //HögerGolv
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var material = new THREE.MeshLambertMaterial({ map: texture });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "floor";
            scene.add(mesh);
            mesh.position.set(50, 0, -15);


            //HögerLångGolv
            var geometry = new THREE.BoxGeometry(50, 1, 200);
            var material = new THREE.MeshLambertMaterial({ map: texture });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "floor";
            scene.add(mesh);
            mesh.position.set(100, 0, -90);


            //UppeGolv
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var material = new THREE.MeshLambertMaterial({ map: texture });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "floor";
            scene.add(mesh);
            mesh.position.set(50, 0, -165);




            // objects
            //Ytterväggar
            //vägg vänsterYtter
            var geometry = new THREE.BoxGeometry(1, 35, 205);
            var material = new THREE.MeshLambertMaterial({ color: 0xE1E1E1 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(-27, 17.5, -90);

            //Vägg bakomYtter
            var geometry = new THREE.BoxGeometry(155, 35, 1);
            var material = new THREE.MeshLambertMaterial({ color: 0xE1E1E1 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(50, 17.5, 12);

            //Vägg HögerYtter
            var geometry = new THREE.BoxGeometry(1, 35, 205);
            var material = new THREE.MeshLambertMaterial({ color: 0xE1E1E1 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(127, 17.5, -90);

            //väggFramYtter
            var geometry = new THREE.BoxGeometry(155, 35, 1);
            var material = new THREE.MeshLambertMaterial({ color: 0xE1E1E1 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(50, 17.5, -192);

            //Innerväggar


            //VäggVänsterInner
            var geometry = new THREE.BoxGeometry(1, 35, 97);
            var material = new THREE.MeshLambertMaterial({ color: 0xE1E1E1 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(27, 17.5, -90);

            //VäggBakInner
            var geometry = new THREE.BoxGeometry(45, 35, 1);
            var material = new THREE.MeshLambertMaterial({ color: 0xE1E1E1 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(50, 17.5, -42);

            //VäggHögerInner
            var geometry = new THREE.BoxGeometry(1, 35, 97);
            var material = new THREE.MeshLambertMaterial({ color: 0xE1E1E1 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(73, 17.5, -90);


            //väggFramInner
            var art = new THREE.TextureLoader().load('/ShowroomImages/global-art-tack.jpg');
            var geometry = new THREE.BoxGeometry(45, 35, 1);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall"
            scene.add(mesh);
            mesh.position.set(50, 17.5, -138);


            //Tak
            //StartTak
            var geometry = new THREE.BoxGeometry(50, 1, 200);
            var material = new THREE.MeshLambertMaterial({ color: 0xC5C5C2 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(0, 35, -90);


            //HögerTak
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var material = new THREE.MeshLambertMaterial({ color: 0xC5C5C2 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(50, 35, -15);


            //HögerLångTak
            var geometry = new THREE.BoxGeometry(50, 1, 200);
            var material = new THREE.MeshLambertMaterial({ color: 0xC5C5C2 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(100, 35, -90);


            //UppeTak
            var geometry = new THREE.BoxGeometry(50, 1, 50);
            var material = new THREE.MeshLambertMaterial({ color: 0xC5C5C2 });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "wall";
            scene.add(mesh);
            mesh.position.set(50, 35, -165);

            //PelareVänsterFram
            var geometry = new THREE.BoxGeometry(0.5, 35, 0.5);
            var material = new THREE.MeshLambertMaterial({ color: 0x000000 });
            var mesh = new THREE.Mesh(geometry, material);

            scene.add(mesh);
            mesh.position.set(-26, 17.5, -191);

            //PelareHögerFram
            var geometry = new THREE.BoxGeometry(0.5, 35, 0.5);
            var material = new THREE.MeshLambertMaterial({ color: 0x000000 });
            var mesh = new THREE.Mesh(geometry, material);

            scene.add(mesh);
            mesh.position.set(126, 17.5, -191);

            //PelareVänsterBak
            var geometry = new THREE.BoxGeometry(0.5, 35, 0.5);
            var material = new THREE.MeshLambertMaterial({ color: 0x000000 });
            var mesh = new THREE.Mesh(geometry, material);

            scene.add(mesh);
            mesh.position.set(-26, 17.5, 11);

            //PelareHögerBak
            var geometry = new THREE.BoxGeometry(0.5, 35, 0.5);
            var material = new THREE.MeshLambertMaterial({ color: 0x000000 });
            var mesh = new THREE.Mesh(geometry, material);

            scene.add(mesh);
            mesh.position.set(126, 17.5, 11);

            //Tavlor Vänsteryttervägg
            var art = new THREE.TextureLoader().load('@Model.Images[0].Source');
            var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 1;

            scene.add(mesh);
            mesh.position.set(-26.5, 12, -27);

            var art = new THREE.TextureLoader().load('@Model.Images[1].Source');
            var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 2;

            scene.add(mesh);
            mesh.position.set(-26.5, 12, -70);

            var art = new THREE.TextureLoader().load('@Model.Images[2].Source');
            var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 3;

            scene.add(mesh);
            mesh.position.set(-26.5, 12, -113);

            var art = new THREE.TextureLoader().load('@Model.Images[3].Source');
            var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 4;

            mesh.position.set(-26.5, 12, -156);
            scene.add(mesh);

            //Tavlor YtterFramVägg

            var art = new THREE.TextureLoader().load('@Model.Images[4].Source');
            var geometry = new THREE.BoxGeometry(8, 10, 0.1);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 5;


            mesh.position.set(7, 12, -191.5);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('@Model.Images[5].Source');
            var geometry = new THREE.BoxGeometry(8, 10, 0.1);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 6;

            mesh.position.set(50, 12, -191.5);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('@Model.Images[6].Source');
            var geometry = new THREE.BoxGeometry(8, 10, 0.1);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 7;

            mesh.position.set(93, 12, -191.5);
            scene.add(mesh);

            //Tavlor YtterHögerVägg

            var art = new THREE.TextureLoader().load('@Model.Images[7].Source');
            var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 8;

            mesh.position.set(126.5, 12, -27);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('@Model.Images[8].Source');
            var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 9;

            scene.add(mesh);
            mesh.position.set(126.5, 12, -70);

            var art = new THREE.TextureLoader().load('@Model.Images[9].Source');
            var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 10;

            scene.add(mesh);
            mesh.position.set(126.5, 12, -113);

            var art = new THREE.TextureLoader().load('@Model.Images[10].Source');
            var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 11;

            mesh.position.set(126.5, 12, -156);
            scene.add(mesh);

            //Tavla YtterväggBak


            var art = new THREE.TextureLoader().load('@Model.Images[11].Source');
            var geometry = new THREE.BoxGeometry(8, 10, 0.1);
            var material = new THREE.MeshLambertMaterial({ color: 0xE1E1E1, map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 12;

            mesh.position.set(50, 12, 11.5);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('@Model.Images[12].Source');
            var geometry = new THREE.BoxGeometry(8, 10, 0.1);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 13;

            mesh.position.set(93, 12, 11.5);
            scene.add(mesh);


            //Tavla InnerväggVänster
            var art = new THREE.TextureLoader().load('@Model.Images[13].Source');
            var geometry = new THREE.BoxGeometry(0.1, 8, 13);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 14;

            mesh.position.set(26.5, 12, -70);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('@Model.Images[14].Source');
            var geometry = new THREE.BoxGeometry(0.1, 8, 13);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 15;

            mesh.position.set(26.5, 12, -113);
            scene.add(mesh);

            //TavlorInnerväggHöger
            var art = new THREE.TextureLoader().load('@Model.Images[15].Source');
            var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 16;

            mesh.position.set(73.5, 12, -70);
            scene.add(mesh);

            var art = new THREE.TextureLoader().load('@Model.Images[16].Source');
            var geometry = new THREE.BoxGeometry(0.1, 10, 8);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.Number = 18;

            mesh.position.set(73.5, 12, -113);
            scene.add(mesh);

            //DörrYtterväggBak
            var art = new THREE.TextureLoader().load('/ShowroomImages/door.jpg');
            var geometry = new THREE.BoxGeometry(16, 20, 0.1);
            var material = new THREE.MeshLambertMaterial({ map: art });
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = "exit";

            mesh.position.set(0, 10, 11.5);
            scene.add(mesh);


            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            //

            window.addEventListener('resize', onWindowResize, false);

        }

        function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);

        }


            function onDocumentMouseDown(event) {
            mouse.x = 0/*( event.clientX / renderer.domElement.width ) * 2 - 1;*/
            mouse.y = 0/*- ( event.clientY / renderer.domElement.height ) * 2 + 1;*/ //If you want the raycaster to look at the position of the mouse


            raycaster.setFromCamera(mouse, camera);
            raycaster.far = 65;
            raycaster.near = 0;

            var intersects = raycaster.intersectObjects(scene.children);

            if (intersects.length > 0 && intersects[0].object.name === 'exit') {
                exitIsClicked = true;
                controls.unlock();
            } else if (intersects.length > 0 && intersects[0].object.name != 'floor' && intersects[0].object.name != 'wall') {

                artIsClicked = true;
                let image = intersects[0].object;
                showArtInfo(image);
                //let fuck = 0;
                //artInfoPicture = image.material.map.image.outerHTML;
                //artInfoName = image.name;

                controls.unlock();
                /*
                instructions.style.display = 'none';
                artInfo.style.display = '';
                */

            }
        }


        function animate() {


            requestAnimationFrame(animate);

            const time = performance.now();

            if (controls.isLocked === true) {

                /* raycaster.ray.origin.copy( controls.getObject().position );
                 raycaster.ray.origin.y -= 10;

                 const intersections = raycaster.intersectObjects( scene.children );


                 const onObject = intersections.length > 0;
                 */



                const delta = (time - prevTime) / 1500;

                velocity.x -= velocity.x * 10.0 * delta;
                velocity.z -= velocity.z * 10.0 * delta;

                velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass

                direction.z = Number(moveForward) - Number(moveBackward);
                direction.x = Number(moveRight) - Number(moveLeft);
                direction.normalize(); // this ensures consistent movements in all directions


                if (moveForward || moveBackward) velocity.z -= direction.z * 400.0 * delta;
                if (moveLeft || moveRight) velocity.x -= direction.x * 400.0 * delta;

                if (controls.getObject().position.x > 122) {
                    controls.getObject().position.x = 122;
                }
                if (controls.getObject().position.z > 7) {
                    controls.getObject().position.z = 7;
                }
                if (controls.getObject().position.x < -23) {
                    controls.getObject().position.x = -23;
                }
                if (controls.getObject().position.z < -187) {
                    controls.getObject().position.z = -187;
                }

                //VäggVänsterInner
                if ((controls.getObject().position.x > 21 && controls.getObject().position.x < 73) &&
                    (controls.getObject().position.z < -42 && controls.getObject().position.z > -138)) {
                    controls.getObject().position.x = 21;
                }
                //VäggBakInner
                if ((controls.getObject().position.x > 27 && controls.getObject().position.x < 73) &&
                    (controls.getObject().position.z < -36 && controls.getObject().position.z > -42)) {
                    controls.getObject().position.z = -36;
                }//VäggHögerInner
                if ((controls.getObject().position.x > 73 && controls.getObject().position.x < 77) &&
                    (controls.getObject().position.z < -42 && controls.getObject().position.z > -138)) {
                    controls.getObject().position.x = 77;
                }
                //VäggFramInner
                if ((controls.getObject().position.x > 27 && controls.getObject().position.x < 73) &&
                    (controls.getObject().position.z > -142 && controls.getObject().position.z < -138)) {
                    controls.getObject().position.z = -142;
                }


                /* if ( onObject === true ) {

                     console.log(intersections);
                     velocity.y = Math.max( 0, velocity.y );
                     canJump = true;
                 }*/

                controls.moveRight(- velocity.x * delta);
                controls.moveForward(- velocity.z * delta);

                controls.getObject().position.y += (velocity.y * delta); // new behavior

                if (controls.getObject().position.y < 10) {

                    velocity.y = 0;
                    controls.getObject().position.y = 10;

                    canJump = true;

                }
                if (controls.getObject().position.x < 10) {

                    velocity.y = 0;
                    controls.getObject().position.y = 10;

                    canJump = true;

                }

            }

            prevTime = time;

            renderer.render(scene, camera);

        }

    </script>
</body>
</html>
